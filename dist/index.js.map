{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar getType = require( '@stdlib/array-dtype' );\nvar ctors = require( '@stdlib/array-ctors' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar format = require( '@stdlib/string-format' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar copy = require( '@stdlib/array-base-copy' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether a data type is a single-precision complex floating-point number data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} boolean indicating whether a provided data type is a single-precision complex floating-point number data type\n*\n* @example\n* var bool = isComplex64( 'float64' );\n* // returns false\n*\n* @example\n* var bool = isComplex64( 'complex64' );\n* // returns true\n*/\nfunction isComplex64( dtype ) {\n\treturn ( dtype === 'complex64' );\n}\n\n/**\n* Tests whether a data type is a double-precision complex floating-point number data type.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {boolean} boolean indicating whether a provided data type is a double-precision complex floating-point number data type\n*\n* @example\n* var bool = isComplex128( 'float64' );\n* // returns false\n*\n* @example\n* var bool = isComplex128( 'complex128' );\n* // returns true\n*/\nfunction isComplex128( dtype ) {\n\treturn ( dtype === 'complex128' );\n}\n\n\n// MAIN //\n\n/**\n* Converts an array to an array of a different data type.\n*\n* @param {Collection} x - array to convert\n* @param {string} dtype - output data type\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a recognized array data type\n* @returns {(Array|TypedArray|ComplexArray)} output array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0, 4.0 ];\n*\n* var out = convert( arr, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction convert( x, dtype ) {\n\tvar isc64;\n\tvar ctor;\n\tvar xbuf;\n\tvar obuf;\n\tvar out;\n\tvar len;\n\tvar t;\n\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', x ) );\n\t}\n\t// If the output data type is \"generic\", our task is relatively straightforward...\n\tif ( dtype === 'generic' ) {\n\t\treturn copy( x );\n\t}\n\tctor = ctors( dtype );\n\tif ( ctor === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a recognized array data type. Value: `%s`.', dtype ) );\n\t}\n\t// Cache the input array length:\n\tlen = x.length;\n\n\t// Get the input array data type:\n\tt = getType( x );\n\tisc64 = isComplex64( t );\n\n\t// Create the output array:\n\tout = new ctor( len );\n\n\t// As the output data type is not \"generic\", we need to explicitly handle complex number input arrays...\n\tif ( isc64 || isComplex128( t ) ) {\n\t\tif ( isc64 ) {\n\t\t\txbuf = reinterpret64( x, 0 );\n\t\t} else {\n\t\t\txbuf = reinterpret128( x, 0 );\n\t\t}\n\t\t// Check whether the output data type is a complex number data type...\n\t\tif ( isComplex64( dtype ) ) { // cmplx => cmplx\n\t\t\tobuf = reinterpret64( out, 0 );\n\t\t\tgcopy( len*2, xbuf, 1, obuf, 1 );\n\t\t\treturn out;\n\t\t}\n\t\tif ( isComplex128( dtype ) ) { // cmplx => cmplx\n\t\t\tobuf = reinterpret128( out, 0 );\n\t\t\tgcopy( len*2, xbuf, 1, obuf, 1 );\n\t\t\treturn out;\n\t\t}\n\t\t// We assume that the output data type is a real number data type, given that we're looking to convert a provided complex number array; in which case, we'll only extract the real components from the complex number input array...\n\t\tgcopy( len, xbuf, 2, out, 1 ); // cmplx => real\n\t\treturn out;\n\t}\n\t// Check whether we need to explicitly handle complex number output arrays...\n\tisc64 = isComplex64( dtype );\n\tif ( isc64 || isComplex128( dtype ) ) {\n\t\tif ( isc64 ) {\n\t\t\tobuf = reinterpret64( out, 0 );\n\t\t} else {\n\t\t\tobuf = reinterpret128( out, 0 );\n\t\t}\n\t\t// We assume that the input data type is a real number data type, given that we're looking to convert to a complex number array; in which case, we'll only set the real components... (WARNING: we're assuming that the output array has been zero-initialized! The imaginary components should be zero!)\n\t\tgcopy( len, x, 1, obuf, 2 ); // real => cmplx\n\t\treturn out;\n\t}\n\t// At this point, we're no longer handling complex number arrays, so we'll just assume that we can perform a straightforward copy...\n\tgcopy( len, x, 1, out, 1 ); // note: `gcopy` is assumed to support arrays using accessors\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = convert;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an array to an array of a different data type.\n*\n* @module @stdlib/array-convert\n*\n* @example\n* var convert = require( '@stdlib/array-convert' );\n*\n* var arr = [ 1.0, 2.0, 3.0, 4.0 ];\n*\n* var out = convert( arr, 'float64' );\n* // returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,QAAS,8BAA+B,EACvDC,EAAU,QAAS,qBAAsB,EACzCC,EAAQ,QAAS,qBAAsB,EACvCC,EAAiB,QAAS,6CAA8C,EACxEC,EAAgB,QAAS,4CAA6C,EACtEC,EAAS,QAAS,uBAAwB,EAC1CC,EAAQ,QAAS,yBAA0B,EAC3CC,EAAO,QAAS,yBAA0B,EAoB9C,SAASC,EAAaC,EAAQ,CAC7B,OAASA,IAAU,WACpB,CAiBA,SAASC,EAAcD,EAAQ,CAC9B,OAASA,IAAU,YACpB,CAoBA,SAASE,EAASC,EAAGH,EAAQ,CAC5B,IAAII,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACnB,EAAcY,CAAE,EACrB,MAAM,IAAI,UAAWP,EAAQ,8EAA+EO,CAAE,CAAE,EAGjH,GAAKH,IAAU,UACd,OAAOF,EAAMK,CAAE,EAGhB,GADAE,EAAOZ,EAAOO,CAAM,EACfK,IAAS,KACb,MAAM,IAAI,UAAWT,EAAQ,uFAAwFI,CAAM,CAAE,EAa9H,OAVAS,EAAMN,EAAE,OAGRO,EAAIlB,EAASW,CAAE,EACfC,EAAQL,EAAaW,CAAE,EAGvBF,EAAM,IAAIH,EAAMI,CAAI,EAGfL,GAASH,EAAcS,CAAE,GACxBN,EACJE,EAAOX,EAAeQ,EAAG,CAAE,EAE3BG,EAAOZ,EAAgBS,EAAG,CAAE,EAGxBJ,EAAaC,CAAM,GACvBO,EAAOZ,EAAea,EAAK,CAAE,EAC7BX,EAAOY,EAAI,EAAGH,EAAM,EAAGC,EAAM,CAAE,EACxBC,GAEHP,EAAcD,CAAM,GACxBO,EAAOb,EAAgBc,EAAK,CAAE,EAC9BX,EAAOY,EAAI,EAAGH,EAAM,EAAGC,EAAM,CAAE,EACxBC,IAGRX,EAAOY,EAAKH,EAAM,EAAGE,EAAK,CAAE,EACrBA,KAGRJ,EAAQL,EAAaC,CAAM,EACtBI,GAASH,EAAcD,CAAM,GAC5BI,EACJG,EAAOZ,EAAea,EAAK,CAAE,EAE7BD,EAAOb,EAAgBc,EAAK,CAAE,EAG/BX,EAAOY,EAAKN,EAAG,EAAGI,EAAM,CAAE,EACnBC,IAGRX,EAAOY,EAAKN,EAAG,EAAGK,EAAK,CAAE,EAClBA,GACR,CAKAlB,EAAO,QAAUY,IC9HjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isCollection", "getType", "ctors", "reinterpret128", "reinterpret64", "format", "gcopy", "copy", "isComplex64", "dtype", "isComplex128", "convert", "x", "isc64", "ctor", "xbuf", "obuf", "out", "len", "t", "main"]
}
